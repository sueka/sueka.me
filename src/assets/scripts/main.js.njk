window.addEventListener('touchstart', () => {})

import('https://ga.jspm.io/npm:bowser@2.11.0/es5.js').then(({ default: Bowser }) => {
  const browser = Bowser.getParser(navigator.userAgent)

  const isGecko = browser.isEngine('Gecko')
  const isBlink = browser.isEngine('Blink')
  const isSafari = browser.isBrowser('Safari')

  if (!isGecko && !isBlink && !isSafari) {
    return
  }

  const links = document.querySelectorAll('link[href$="{{ "~/assets/stylesheets/horizontal.css" | url }}"], link[href$="{{ "~/assets/stylesheets/vertical.css" | url }}"]')

  for (const link of links) {
    if (isGecko) {
      const linkForGecko = link.cloneNode()

      linkForGecko.href = linkForGecko.getAttribute('href').replace(/(?=\.css$)/, '-gecko')
      document.head.insertBefore(linkForGecko, link.nextSibling)
    }

    if (isBlink) {
      const linkForBlink = link.cloneNode()

      linkForBlink.href = linkForBlink.getAttribute('href').replace(/(?=\.css$)/, '-blink')
      document.head.insertBefore(linkForBlink, link.nextSibling)
    }

    if (isSafari) {
      const linkForWebkit = link.cloneNode()

      linkForWebkit.href = linkForWebkit.getAttribute('href').replace(/(?=\.css$)/, '-safari')
      console.log(linkForWebkit)
      document.head.insertBefore(linkForWebkit, link.nextSibling)
    }
  }
})

;(() => {
  const links = document.querySelectorAll('.linkToVerticalCss')

  // Skip on horizontal-writing pages
  if (links.length === 0) {
    return
  }

  for (const link of links) {
    const observer = new MutationObserver((mutations) => {
      for (const mutation of mutations) {
        if (mutation.type === 'attributes' && mutation.attributeName === 'lang') {
          link.disabled = mutation.target.lang !== 'ja'
        }
      }
    })

    observer.observe(document.documentElement, { attributes: true })
  }
})()

;(() => {
  const observer = new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type === 'childList') {
        for (const node of mutation.addedNodes) {
          if (node instanceof SVGElement) {
            const widthBeforeResizing = node.clientWidth

            resizeMermaid(node, widthBeforeResizing)

            window.addEventListener('resize', (_event) => {
              resizeMermaid(node, widthBeforeResizing)
            })
          }
        }
      }
    }
  })

  window.addEventListener('DOMContentLoaded', () => {
    const mermaids = document.querySelectorAll('.mermaid')

    for (const mermaid of mermaids) {
      observer.observe(mermaid, { childList: true })
    }
  })
})()

function resizeMermaid(svg, intrinsicWidth) {
  const root = document.querySelector(':root')
  const rem = window.getComputedStyle(root).fontSize

  svg.style.width = `calc(${ intrinsicWidth } * ${ rem } / 16)`
}
